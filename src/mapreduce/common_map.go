package mapreduce

import (
	"bufio"
	"fmt"
	"hash/fnv"
	"os"
)

func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(filename string, contents string) []KeyValue,
) {
	//
	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.
	//
	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	// Your code here (Part I).
	//
	// 读取给定的文件
	fi, err := os.Open(inFile)
	if err != nil {
		fmt.Printf("Error: %s.", err)
	}

	defer fi.Close()

	scanner := bufio.NewScanner(fi)

	reduceFileCache := make(map[string]*os.File)
	// 打开的reduce文件缓存
	defer closeReduceFileCache(reduceFileCache)

	for scanner.Scan() {
		line := scanner.Text()

		pair := mapF(inFile, line)

		handlePairsForOneLine(pair, nReduce, jobName, mapTask, reduceFileCache)
	}
}

func handlePairsForOneLine(pairs []KeyValue, nReduce int, jobName string, mapTask int, reduceFileCache map[string]*os.File) error {
	for _, pair := range pairs {
		r := ihash(pair.Key) % nReduce

		reduceFileName := reduceName(jobName, mapTask, r)

		target, err := openReduceFile(reduceFileName, reduceFileCache)

		if err != nil {
			return err
		}

		// 假定reduce的格式是key=value，一个reduce文件中可能有多个不同的key存在
		line := pair.Key + "=" + pair.Value + "\n"
		target.WriteString(line)
	}

	return nil
}

func openReduceFile(reduceFileName string, reduceFileCache map[string]*os.File) (*os.File, error) {
	target := reduceFileCache[reduceFileName]

	if target != nil {
		return target, nil
	}

	fi, err := os.Open(reduceFileName)

	if err == nil {
		reduceFileCache[reduceFileName] = fi
		return fi, nil
	}

	if os.IsNotExist(err) {
		fmt.Printf("Reduce中间文件: %s不存在，创建之.\n", reduceFileName)
		fi, err = os.Create(reduceFileName)

		if err == nil {
			reduceFileCache[reduceFileName] = fi
			return fi, nil
		}
	}

	fmt.Printf("Reduce中间文件: %s创建失败，错误码: %s，退出.\n", reduceFileName, err)
	return nil, err
}

// 关闭reduce中间文件缓存
func closeReduceFileCache(reduceFileCache map[string]*os.File) {
	for _, value := range reduceFileCache {
		value.Close()
	}
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
